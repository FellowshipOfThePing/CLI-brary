# trash function - Moves argued files to .Trash directory
# Serves as a safar alternative to rm
trash() {
        mv "$1" "/Users/Jeremy/.Trash"
}


# cs function - simple combo of cd and ls
cs() {
if [ -d $1 ]
then
	cd $1
	ls $PWD
fi
}


# mkcd - simple combo of mkdir and cd
# Creates intermediate directories and ignore symbolic links
mkcd() {
	mkdir -p -- "$1" && cd -P -- "$1"
}


# environment on - finds the nearest python virtualenv and activates it
# replaces source env_dir/bin/activate
envon() {
	# Should not run in home directory
	if [ $(pwd) == $HOME ]
	then
		echo "Error: envon cannot be used in or above the ~ directory"
		return
	fi

	echo "Looking for virtual Environments..."
	
	# Store find results in array, measure length
	arr=( $(find . -name activate -type f) )
	count=${#arr[@]}
	
	echo $count virtual environments found
	
	# activate first element in array
	if [[ "$count" != "0" ]]
	then
		env=${arr[0]}
		source $env
		echo environment activated
	fi
}


# Clean CWD - checks for empty files and directories in CWD, and moves them to to trash
cleanDir() (

	# Private function used to check files
	checkFile() {
		file="$1"
		if [ ! -s "$file" ]; then
			echo "$file moved to trash"
			trash "$file"
		elif [ \( -d "$file" \) -a \( ! "$(ls -A $file)" \) ]; then
			echo "$file directory moved to trash"
			trash "$file" 
		fi
	}


	# multiple arguments passed - return error
	if [ ${#@} -gt 1 ]; then
		echo "Error: cleanDir command takes no arguments"

	# One argument passed - clean argued dir (In testing, for now just returns error)
	elif [ ${#@} == 1 ]; then
		echo "Error: cleanDir command takes no arguments"
	#	dir="$1"
	#	for file in $dir; do
	#		checkFile "$file"
	#	done

	# No argument - clean current dir
	else
		dir=$(pwd)

		# Dir is not empty
		if [ "$(ls -A $dir)" ]; then
		for file in *; do
			checkFile "$file"
		done
		else
			echo "$dir is empty"
		fi
	fi
)


